### Features Checklist

- [ ] Create a class called AnimalShelter which holds only dogs and cats. The shelter operates using a first-in, first-out approach.
Implement the following methods:
- [ ] enqueue(animal): adds animal to the shelter. animal can be either a dog or a cat object.
- [ ] dequeue(pref): returns either a dog or a cat. If pref, a string, is ‘cat’ return the longest-waiting cat. If pref is ‘dog’, return the longest-waiting dog. For anything else, return either a cat or a dog.
- [ ] (Stretch Goal) If a cat or dog isn’t preferred, return whichever animal has been waiting in the shelter the longest.

- [x] Created and working in a branch titled as the challenge name
- [x] Created a directory named according to the challenge name, import all starter files
- [x] Whiteboard image placed in /assests directory with name matching the challenge
- [x] Function name labeled according to instructions
- [x] Prepare Checklist to use with assignment completion
- [] Write at least 3 test assertions
- [] Ensure code is passing all tests
- [] Update challenge Readme file with accurate info.
- [] Update main repo Readme file with accurate info.
