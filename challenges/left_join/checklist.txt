### Features Checklist
left_join

Features
- [ ] Write a function that LEFT JOINs two hashmaps into a single data structure.
- [ ] The first parameter is a hashmap that has word strings as keys, and a synonym of the key as values.
- [ ] The second parameter is a hashmap that has word strings as keys, and antonyms of the key as values.
- [ ] Combine the key and corresponding values (if they exist) into a new data structure according to LEFT JOIN logic.
- [ ] LEFT JOIN means all the values in the first hashmap are returned, and if values exist in the “right” hashmap, they are appended to the result row. If no values exist in the right hashmap, then some flavor of NULL should be appended to the result row.
- [ ] The returned data structure that holds the results is up to you. It doesn’t need to exactly match the output below, so long as it achieves the LEFT JOIN logic.
        Avoid utilizing any of the library methods available to your language.
Stretch Goal
- [ ] Consider a RIGHT JOIN. Can you implement this as a new function? How about by passing an optional parameter to your initial function, to speficy if LEFT JOIN or RIGHT JOIN logic should be used?
General for Challenges
- [x] Created and working in a branch titled as the challenge name
- [x] Created a directory named according to the challenge name, import all starter files
- [ ] Whiteboard image placed in /assests directory with name matching the challenge
- [x] Function name labeled according to instructions
- [x] Prepare Checklist to use with assignment completion
- [ ] Write at least 3 test assertions
- [ ] Ensure code is passing all tests
- [x] Update challenge Readme file with accurate info.
- [x] Update main repo Readme file with accurate info.
